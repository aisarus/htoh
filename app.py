import os
import traceback

import streamlit as st
from openai import OpenAI


st.set_page_config(page_title="EFM Translator Debug", layout="wide")


# --- Diagnostics Sidebar ---
st.sidebar.title("üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
api_key = os.getenv("OPENAI_API_KEY")
st.sidebar.write("API key loaded:", "‚úÖ" if api_key else "‚ùå")

# 2. –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from openai import __version__ as openai_version
except (ImportError, AttributeError):
    openai_version = "unknown"
st.sidebar.write("openai lib version:", openai_version)

# 3. –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
client = None
if api_key:
    try:
        client = OpenAI(api_key=api_key)
        models = client.models.list()
        st.sidebar.write(
            "Models available:",
            [m.id for m in models.data][:5],
            "‚Ä¶" if len(models.data) > 5 else "",
        )
    except Exception as e:
        st.sidebar.write("Error listing models:", e)
        client = None

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞
if not api_key:
    st.sidebar.error("–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ Secrets –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
    st.stop()

if client is None:
    st.sidebar.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç")
    st.stop()

# --- Main UI ---
st.title("ü™≤ EFM Translator ‚Äî Debug-–≤–µ—Ä—Å–∏—è")

col1, col2 = st.columns(2)
with col1:
    text_a = st.text_area("–ß–µ–ª–æ–≤–µ–∫ A:", height=150)
with col2:
    text_b = st.text_area("–ß–µ–ª–æ–≤–µ–∫ B:", height=150)

def make_prompt(msg: str) -> str:
    return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏ EFM:

1. Emotion: —ç–º–æ—Ü–∏–∏
2. Fact: —Ñ–∞–∫—Ç—ã
3. Narrative: —Ü–µ–ª—å
4. Meta-context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
5. Bias: –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å

–¢–µ–∫—Å—Ç:
\"\"\"{msg}\"\"\"
"""

def analyze(msg: str) -> str:
    if not msg.strip():
        return ""
    try:
        resp = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ –º–æ–¥–µ–ª–∏ EFM. –°—Ç—Ä–æ–≥–æ –ø–æ –ø—É–Ω–∫—Ç–∞–º."},
                {"role": "user",   "content": make_prompt(msg)}
            ],
            temperature=0.4
        )
        return resp.choices[0].message.content
    except Exception as e:
        tb = traceback.format_exc()
        return f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API:\n{e}\n\nTraceback:\n{tb}"

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
    st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è A")
    st.text(analyze(text_a))
    st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è B")
    st.text(analyze(text_b))
